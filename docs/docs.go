// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/burger": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "burger"
                ],
                "summary": "Creates a new burger",
                "parameters": [
                    {
                        "description": "Burgers filter",
                        "name": "burger",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entities.BurgerFilter"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Burgers array",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entities.Burger"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/burger/create": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "burger"
                ],
                "summary": "Creates a new burger",
                "parameters": [
                    {
                        "description": "New burger payload",
                        "name": "burger",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entities.BurgerRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Burger ID",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/burger/order": {
            "put": {
                "description": "Orders a burger and increments its internal state (ordered) by 1, which represents its popularity",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "burger"
                ],
                "summary": "Order a new burger",
                "parameters": [
                    {
                        "description": "New burger payload",
                        "name": "burger",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entities.BurgerOrderRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/burger/popular": {
            "get": {
                "description": "Get top 5 burgers. Popularity is based on number of orders (ordered field)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "burger"
                ],
                "summary": "Get popular burgers",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entities.Burger"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/burger/random": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "burger"
                ],
                "summary": "Get random burger",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.Burger"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/burger/{id}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "burger"
                ],
                "summary": "Get burger by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Burger ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.Burger"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/ingredients": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "burger"
                ],
                "summary": "Get a list of burgers containing the selected ingredients",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Ingredients with a lowercase letter separated by commas",
                        "name": "search",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entities.Burger"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "entities.Burger": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "ingredients": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entities.Ingredient"
                    }
                },
                "name": {
                    "type": "string"
                },
                "ordered": {
                    "type": "integer"
                }
            }
        },
        "entities.BurgerFilter": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                }
            }
        },
        "entities.BurgerOrderRequest": {
            "type": "object",
            "properties": {
                "burger_id": {
                    "type": "integer"
                }
            }
        },
        "entities.BurgerRequest": {
            "type": "object",
            "properties": {
                "ingredients": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entities.Ingredient"
                    }
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "entities.Ingredient": {
            "type": "object",
            "properties": {
                "burger_id": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "handlers.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
